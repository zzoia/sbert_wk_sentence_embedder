// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TextClustering.Domain;

namespace TextClustering.Migrations.Migrations
{
    [DbContext(typeof(TextClusteringDbContext))]
    partial class TextClusteringDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TextClustering.Domain.Entities.Cluster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DatasetClusteringId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DatasetClusteringId");

                    b.ToTable("Clusters");
                });

            modelBuilder.Entity("TextClustering.Domain.Entities.ClusterDatasetText", b =>
                {
                    b.Property<int>("ClusterId")
                        .HasColumnType("int");

                    b.Property<int>("DatasetTextId")
                        .HasColumnType("int");

                    b.HasKey("ClusterId", "DatasetTextId");

                    b.HasIndex("DatasetTextId");

                    b.ToTable("ClusterDatasetTexts");
                });

            modelBuilder.Entity("TextClustering.Domain.Entities.Dataset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Datasets");
                });

            modelBuilder.Entity("TextClustering.Domain.Entities.DatasetClustering", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAtUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("DatasetId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(1024)")
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DatasetId");

                    b.ToTable("DatasetClusterings");
                });

            modelBuilder.Entity("TextClustering.Domain.Entities.DatasetText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DatasetId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DatasetId");

                    b.HasIndex("Key", "DatasetId")
                        .IsUnique();

                    b.ToTable("DatasetTexts");
                });

            modelBuilder.Entity("TextClustering.Domain.Entities.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClusterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClusterId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("TextClustering.Domain.Entities.TopicToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TopicId");

                    b.ToTable("TopicTokens");
                });

            modelBuilder.Entity("TextClustering.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TextClustering.Domain.Entities.Cluster", b =>
                {
                    b.HasOne("TextClustering.Domain.Entities.DatasetClustering", "DatasetClustering")
                        .WithMany("Clusters")
                        .HasForeignKey("DatasetClusteringId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TextClustering.Domain.Entities.ClusterDatasetText", b =>
                {
                    b.HasOne("TextClustering.Domain.Entities.Cluster", "Cluster")
                        .WithMany("ClusterDatasetTexts")
                        .HasForeignKey("ClusterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TextClustering.Domain.Entities.DatasetText", "DatasetText")
                        .WithMany("ClusterDatasetTexts")
                        .HasForeignKey("DatasetTextId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TextClustering.Domain.Entities.Dataset", b =>
                {
                    b.HasOne("TextClustering.Domain.Entities.User", "CreatedByUser")
                        .WithMany("Datasets")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TextClustering.Domain.Entities.DatasetClustering", b =>
                {
                    b.HasOne("TextClustering.Domain.Entities.User", "CreatedByUser")
                        .WithMany("DatasetClusterings")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TextClustering.Domain.Entities.Dataset", "Dataset")
                        .WithMany("DatasetClusterings")
                        .HasForeignKey("DatasetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TextClustering.Domain.Entities.DatasetText", b =>
                {
                    b.HasOne("TextClustering.Domain.Entities.Dataset", "Dataset")
                        .WithMany("Texts")
                        .HasForeignKey("DatasetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TextClustering.Domain.Entities.Topic", b =>
                {
                    b.HasOne("TextClustering.Domain.Entities.Cluster", "Cluster")
                        .WithMany("Topics")
                        .HasForeignKey("ClusterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("TextClustering.Domain.Entities.TopicToken", b =>
                {
                    b.HasOne("TextClustering.Domain.Entities.Topic", "Topic")
                        .WithMany("Tokens")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
